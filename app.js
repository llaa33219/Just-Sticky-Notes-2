// Ï†ÑÏó≠ Î≥ÄÏàò
let currentUser = null;
let currentTool = 'move';
let zoomLevel = 1;
let panX = -4000; // ÏãúÏûë ÏúÑÏπòÎ•º Ï§ëÏïôÏúºÎ°ú
let panY = -4000;
let isDragging = false;
let lastMouseX = 0;
let lastMouseY = 0;
let stickyNotes = [];
let ws = null;
let selectedColor = '#FFEB3B';
let drawingTool = 'pen';
let isDrawing = false;
let draggedNote = null;
let dragOffsetX = 0;
let dragOffsetY = 0;
let isDraggingNote = false;
let lastUpdateTime = 0;
let updateThrottle = 0; // throttle ÏôÑÏ†Ñ Ï†úÍ±∞ - Î™®Îì† ÏõÄÏßÅÏûÑ Ï¶âÏãú Ï†ÑÏÜ°
let currentNoteTool = 'text';
let noteIsDrawing = false;
let reconnectInterval = null;
let heartbeatInterval = null;
let isPageVisible = true;
let connectionStatus = 'disconnected'; // 'connected', 'connecting', 'disconnected'
let latencyMonitor = {
    lastSent: 0,
    lastReceived: 0,
    averageLatency: 0,
    samples: []
};

// DOM ÏöîÏÜåÎì§
const loginScreen = document.getElementById('login-screen');
const app = document.getElementById('app');
const loginNote = document.getElementById('loginNote');
const canvas = document.getElementById('canvas');
const canvasContainer = document.getElementById('canvas-container');
const moveToolBtn = document.getElementById('move-tool');
const noteToolBtn = document.getElementById('note-tool');
const zoomInBtn = document.getElementById('zoom-in');
const zoomOutBtn = document.getElementById('zoom-out');
const zoomLevelSpan = document.getElementById('zoom-level');
const userAvatar = document.getElementById('user-avatar');
const userName = document.getElementById('user-name');
const logoutBtn = document.getElementById('logout-btn');

// ÎÖ∏Ìä∏ ÏóêÎîîÌÑ∞ ÏöîÏÜåÎì§
const noteEditor = document.getElementById('note-editor');
const closeEditorBtn = document.getElementById('close-editor');
const colorBtns = document.querySelectorAll('.color-btn');
const stickyNotePreview = document.getElementById('stickyNotePreview');
const unifiedCanvas = document.getElementById('unified-canvas');
const unifiedCtx = unifiedCanvas.getContext('2d');
const noteTextOverlay = document.getElementById('note-text-overlay');
const saveNoteBtn = document.getElementById('save-note');
const cancelNoteBtn = document.getElementById('cancel-note');

// ÏÉàÎ°úÏö¥ ÎèÑÍµ¨ Î≤ÑÌäºÎì§
const textToolBtn = document.getElementById('text-tool');
const penToolBtn = document.getElementById('pen-tool');
const underlineToolBtn = document.getElementById('underline-tool');
const circleToolBtn = document.getElementById('circle-tool');
const clearAllBtn = document.getElementById('clear-all');

// Ï†ÑÏó≠ ÎîîÎ≤ÑÍπÖ Ìï®ÏàòÎì§ (ÏΩòÏÜîÏóêÏÑú ÏÇ¨Ïö© Í∞ÄÎä•)
window.debugStickyNotes = {
    // ÌòÑÏû¨ ÏßÄÏó∞ÏãúÍ∞Ñ Ï†ïÎ≥¥ Ï∂úÎ†•
    getLatencyInfo: () => {
        console.log('üìä Ïã§ÏãúÍ∞Ñ ÏÑ±Îä• Ï†ïÎ≥¥:');
        console.log(`ÎÑ§Ìä∏ÏõåÌÅ¨ ÏßÄÏó∞: ${latencyMonitor.samples.length > 0 ? latencyMonitor.samples[latencyMonitor.samples.length - 1] + 'ms' : 'ÏóÜÏùå'}`);
        console.log(`ÌèâÍ∑† ÏßÄÏó∞: ${Math.round(latencyMonitor.averageLatency)}ms`);
        console.log(`Ï†ÑÏÜ° ÌöüÏàò: ${latencyMonitor.samples.length}`);
        console.log(`WebSocket ÏÉÅÌÉú: ${ws ? ws.readyState : 'ÏóÜÏùå'}`);
        console.log(`Ïó∞Í≤∞Îêú ÎÖ∏Ìä∏ Ïàò: ${stickyNotes.length}`);
        return latencyMonitor;
    },
    
    // ÏÑ±Îä• Ï¥àÍ∏∞Ìôî
    resetLatency: () => {
        latencyMonitor.samples = [];
        latencyMonitor.averageLatency = 0;
        console.log('üîÑ ÏßÄÏó∞ÏãúÍ∞Ñ ÌÜµÍ≥Ñ Ï¥àÍ∏∞ÌôîÎê®');
    },
    
    // Í∞ïÏ†ú ÎèôÍ∏∞Ìôî
    forceSync: () => {
        if (ws && ws.readyState === WebSocket.OPEN) {
            ws.send(JSON.stringify({
                type: 'sync_request',
                timestamp: Date.now()
            }));
            console.log('üîÑ Í∞ïÏ†ú ÎèôÍ∏∞Ìôî ÏöîÏ≤≠ Ï†ÑÏÜ°Îê®');
        } else {
            console.log('‚ùå WebSocketÏù¥ Ïó∞Í≤∞ÎêòÏßÄ ÏïäÏùå');
        }
    },
    
    // Ïó∞Í≤∞ ÏÉÅÌÉú Ï∂úÎ†•
    getConnectionInfo: () => {
        console.log('üîó Ïó∞Í≤∞ Ï†ïÎ≥¥:');
        console.log(`WebSocket URL: ${ws ? ws.url : 'ÏóÜÏùå'}`);
        console.log(`ÌòÑÏû¨ ÏÉÅÌÉú: ${connectionStatus}`);
        console.log(`ÌéòÏù¥ÏßÄ Í∞ÄÏãúÏÑ±: ${isPageVisible}`);
        console.log(`ÌòÑÏû¨ ÏÇ¨Ïö©Ïûê: ${currentUser ? currentUser.name : 'ÏóÜÏùå'}`);
    }
};

// ÏΩòÏÜîÏóê ÏÇ¨Ïö©Î≤ï Ï∂úÎ†•
console.log(`
üöÄ Just Sticky Notes ÎîîÎ≤ÑÍπÖ ÎèÑÍµ¨:
- debugStickyNotes.getLatencyInfo() : ÏßÄÏó∞ÏãúÍ∞Ñ Ï†ïÎ≥¥ ÌôïÏù∏
- debugStickyNotes.resetLatency() : ÌÜµÍ≥Ñ Ï¥àÍ∏∞Ìôî
- debugStickyNotes.forceSync() : Í∞ïÏ†ú ÎèôÍ∏∞Ìôî
- debugStickyNotes.getConnectionInfo() : Ïó∞Í≤∞ ÏÉÅÌÉú ÌôïÏù∏
`);

// Ï¥àÍ∏∞Ìôî
document.addEventListener('DOMContentLoaded', () => {
    checkLoginStatus();
    setupEventListeners();
    setupCanvas();
    connectWebSocket();
    setupVisibilityHandlers();
    setupConnectionStatusIndicator();
    setupLatencyMonitor(); // ÏßÄÏó∞ÏãúÍ∞Ñ Î™®ÎãàÌÑ∞ Ï∂îÍ∞Ä
});

// Î°úÍ∑∏Ïù∏ ÏÉÅÌÉú ÌôïÏù∏
function checkLoginStatus() {
    const token = localStorage.getItem('userToken');
    const userData = localStorage.getItem('userData');
    
    if (token && userData) {
        currentUser = JSON.parse(userData);
        showApp();
    } else {
        showLogin();
    }
}

// Î°úÍ∑∏Ïù∏ ÌôîÎ©¥ ÌëúÏãú
function showLogin() {
    loginScreen.classList.remove('hidden');
    app.classList.add('hidden');
}

// Ïï± ÌôîÎ©¥ ÌëúÏãú
function showApp() {
    loginScreen.classList.add('hidden');
    app.classList.remove('hidden');
    
    // ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ ÌëúÏãú
    userAvatar.src = currentUser.picture;
    userName.textContent = currentUser.name;
    
    // Ï∫îÎ≤ÑÏä§ ÏóÖÎç∞Ïù¥Ìä∏
    updateCanvasTransform();
    
    // WebSocketÏù¥ Ïù¥ÎØ∏ Ïó∞Í≤∞ÎêòÏñ¥ ÏûàÏúºÎ©¥ ÎèôÍ∏∞Ìôî
    if (ws && ws.readyState === WebSocket.OPEN) {
        syncWithServer();
    }
}

// Ïù¥Î≤§Ìä∏ Î¶¨Ïä§ÎÑà ÏÑ§Ï†ï
function setupEventListeners() {
    // Î°úÍ∑∏Ïù∏ Ïä§Ìã∞ÌÇ§ ÎÖ∏Ìä∏ ÌÅ¥Î¶≠
    loginNote.addEventListener('click', handleGoogleLogin);
    
    // ÎèÑÍµ¨ Î≤ÑÌäºÎì§
    moveToolBtn.addEventListener('click', () => setTool('move'));
    noteToolBtn.addEventListener('click', () => setTool('note'));
    
    // Ï§å Ïª®Ìä∏Î°§
    zoomInBtn.addEventListener('click', () => zoom(1.2));
    zoomOutBtn.addEventListener('click', () => zoom(0.8));
    
    // Î°úÍ∑∏ÏïÑÏõÉ
    logoutBtn.addEventListener('click', handleLogout);
    
    // Ï∫îÎ≤ÑÏä§ Ïù¥Î≤§Ìä∏
    canvasContainer.addEventListener('mousedown', handleCanvasMouseDown);
    canvasContainer.addEventListener('mousemove', handleCanvasMouseMove);
    canvasContainer.addEventListener('mouseup', handleCanvasMouseUp);
    canvasContainer.addEventListener('wheel', handleCanvasWheel);
    
    // ÎÖ∏Ìä∏ ÏóêÎîîÌÑ∞ Ïù¥Î≤§Ìä∏
    closeEditorBtn.addEventListener('click', closeNoteEditor);
    cancelNoteBtn.addEventListener('click', closeNoteEditor);
    saveNoteBtn.addEventListener('click', saveNote);
    
    // ÏÉâÏÉÅ ÏÑ†ÌÉù
    colorBtns.forEach(btn => {
        btn.addEventListener('click', () => {
            colorBtns.forEach(b => b.classList.remove('selected'));
            btn.classList.add('selected');
            selectedColor = btn.dataset.color;
            updateStickyNotePreview();
        });
    });
    
    // ÎÖ∏Ìä∏ ÎèÑÍµ¨Îì§
    textToolBtn.addEventListener('click', () => setNoteTool('text'));
    penToolBtn.addEventListener('click', () => setNoteTool('pen'));
    underlineToolBtn.addEventListener('click', () => setNoteTool('underline'));
    circleToolBtn.addEventListener('click', () => setNoteTool('circle'));
    clearAllBtn.addEventListener('click', clearAll);
    
    // ÌÖçÏä§Ìä∏ Ïò§Î≤ÑÎ†àÏù¥ ÏûÖÎ†• Ïù¥Î≤§Ìä∏
    noteTextOverlay.addEventListener('input', updateStickyNotePreview);
    
    // ÌÜµÌï© Ï∫îÎ≤ÑÏä§ ÏÑ§Ï†ï
    setupUnifiedCanvas();
}

// Íµ¨Í∏Ä Î°úÍ∑∏Ïù∏ Ï≤òÎ¶¨
async function handleGoogleLogin() {
    // Ïä§Ìã∞ÌÇ§ ÎÖ∏Ìä∏ Îñ®Ïñ¥ÏßÄÎäî Ïï†ÎãàÎ©îÏù¥ÏÖò
    loginNote.classList.add('falling');
    
    try {
        // Ïã§Ï†ú Íµ¨Í∏Ä Î°úÍ∑∏Ïù∏ Íµ¨ÌòÑÏùÑ ÏúÑÌï¥ÏÑúÎäî Google OAuth ÏÑ§Ï†ïÏù¥ ÌïÑÏöîÌï©ÎãàÎã§
        // Ïó¨Í∏∞ÏÑúÎäî Îç∞Î™®Ïö©ÏúºÎ°ú Í∞ÄÏÉÅÏùò ÏÇ¨Ïö©Ïûê Îç∞Ïù¥ÌÑ∞Î•º ÏÇ¨Ïö©Ìï©ÎãàÎã§
        await new Promise(resolve => setTimeout(resolve, 1000));
        
        // Îç∞Î™® ÏÇ¨Ïö©Ïûê (Ïã§Ï†úÎ°úÎäî Google APIÏóêÏÑú Î∞õÏïÑÏò¥)
        const user = {
            id: 'demo_user_' + Date.now(),
            name: 'Îç∞Î™® ÏÇ¨Ïö©Ïûê',
            email: 'demo@example.com',
            picture: 'https://ui-avatars.com/api/?name=Demo+User&background=FFEB3B&color=333'
        };
        
        currentUser = user;
        localStorage.setItem('userData', JSON.stringify(user));
        localStorage.setItem('userToken', 'demo_token_' + Date.now());
        
        setTimeout(() => {
            showApp();
        }, 1000);
        
    } catch (error) {
        console.error('Î°úÍ∑∏Ïù∏ Ïã§Ìå®:', error);
        // ÏóêÎü¨ Ï≤òÎ¶¨
        loginNote.classList.remove('falling');
    }
}

// Î°úÍ∑∏ÏïÑÏõÉ Ï≤òÎ¶¨
function handleLogout() {
    localStorage.removeItem('userData');
    localStorage.removeItem('userToken');
    currentUser = null;
    if (ws) {
        ws.close();
    }
    showLogin();
    location.reload();
}

// ÎèÑÍµ¨ ÏÑ§Ï†ï
function setTool(tool) {
    currentTool = tool;
    
    // ÎèÑÍµ¨ Î≤ÑÌäº ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
    document.querySelectorAll('.tool-btn').forEach(btn => {
        btn.classList.remove('active');
    });
    
    if (tool === 'move') {
        moveToolBtn.classList.add('active');
        canvasContainer.className = 'canvas-container move-mode';
    } else if (tool === 'note') {
        noteToolBtn.classList.add('active');
        canvasContainer.className = 'canvas-container note-mode';
    }
}

function zoom(factor) {
    const rect = canvasContainer.getBoundingClientRect();
    const centerX = rect.width / 2;
    const centerY = rect.height / 2;
    
    const oldZoom = zoomLevel;
    zoomLevel = Math.max(0.1, Math.min(3, zoomLevel * factor));
    
    // Ï§ëÏã¨Ï†ê Í∏∞Ï§ÄÏúºÎ°ú Ï§å
    const zoomChange = zoomLevel / oldZoom;
    panX = centerX - (centerX - panX) * zoomChange;
    panY = centerY - (centerY - panY) * zoomChange;
    
    updateCanvasTransform();
    updateZoomLevel();
}

function updateCanvasTransform() {
    canvas.style.transform = `translate(${panX}px, ${panY}px) scale(${zoomLevel})`;
}

function updateZoomLevel() {
    zoomLevelSpan.textContent = Math.round(zoomLevel * 100) + '%';
}

function setupCanvas() {
    updateCanvasTransform();
    updateZoomLevel();
}

function handleCanvasMouseDown(e) {
    const rect = canvasContainer.getBoundingClientRect();
    const x = (e.clientX - rect.left - panX) / zoomLevel;
    const y = (e.clientY - rect.top - panY) / zoomLevel;
    
    // Ïä§Ìã∞ÌÇ§ ÎÖ∏Ìä∏ ÌÅ¥Î¶≠ ÌôïÏù∏ (ÎìúÎûòÍ∑∏Ïö©)
    const clickedNote = e.target.closest('.sticky-note');
    if (clickedNote && currentTool === 'move') {
        const noteId = clickedNote.dataset.noteId;
        const note = stickyNotes.find(n => n.id === noteId);
        
        // Î≥∏Ïù∏Ïù¥ ÎßåÎì† ÎÖ∏Ìä∏Îßå ÎìúÎûòÍ∑∏ Í∞ÄÎä•
        if (note && note.authorId === currentUser.id) {
            isDraggingNote = true;
            draggedNote = clickedNote;
            const noteRect = clickedNote.getBoundingClientRect();
            dragOffsetX = (e.clientX - noteRect.left) / zoomLevel;
            dragOffsetY = (e.clientY - noteRect.top) / zoomLevel;
            
            // ÎìúÎûòÍ∑∏ ÏãúÏûë Ïãú Ïï†ÎãàÎ©îÏù¥ÏÖò ÎπÑÌôúÏÑ±Ìôî
            clickedNote.style.transition = 'none';
            clickedNote.style.zIndex = '1000';
            
            e.preventDefault();
            return;
        }
    }
    
    if (currentTool === 'note' && !clickedNote) {
        openNoteEditor(e);
    } else if (currentTool === 'move' && !draggedNote) {
        isDragging = true;
        lastMouseX = e.clientX;
        lastMouseY = e.clientY;
        canvasContainer.style.cursor = 'grabbing';
        
        // Ìå®Îãù Ïãú Î∂ÄÎìúÎü¨Ïö¥ ÏõÄÏßÅÏûÑÏùÑ ÏúÑÌï¥ transition Ï†úÍ±∞
        canvas.style.transition = 'none';
    }
}

function handleCanvasMouseMove(e) {
    if (isDraggingNote && draggedNote) {
        // Ïä§Ìã∞ÌÇ§ ÎÖ∏Ìä∏ ÎìúÎûòÍ∑∏ - Ï¶âÏãú ÏÑúÎ≤ÑÏóê ÏóÖÎç∞Ïù¥Ìä∏ (throttle Ï†úÍ±∞)
        requestAnimationFrame(() => {
            const rect = canvasContainer.getBoundingClientRect();
            const newX = (e.clientX - rect.left - panX) / zoomLevel - dragOffsetX;
            const newY = (e.clientY - rect.top - panY) / zoomLevel - dragOffsetY;
            
            // Ï¶âÏãú Î°úÏª¨ UI ÏóÖÎç∞Ïù¥Ìä∏
            draggedNote.style.left = newX + 'px';
            draggedNote.style.top = newY + 'px';
            
            // Î°úÏª¨ Îç∞Ïù¥ÌÑ∞ ÏóÖÎç∞Ïù¥Ìä∏
            const noteId = draggedNote.dataset.noteId;
            const note = stickyNotes.find(n => n.id === noteId);
            if (note) {
                note.x = newX;
                note.y = newY;
                
                // Ï¶âÏãú ÏÑúÎ≤Ñ ÏóÖÎç∞Ïù¥Ìä∏ (throttle ÏôÑÏ†Ñ Ï†úÍ±∞)
                sendNoteUpdateImmediate(note);
            }
        });
        
    } else if (isDragging && currentTool === 'move') {
        // Ï∫îÎ≤ÑÏä§ Ìå®Îãù - requestAnimationFrameÏúºÎ°ú ÏµúÏ†ÅÌôî
        requestAnimationFrame(() => {
            const deltaX = e.clientX - lastMouseX;
            const deltaY = e.clientY - lastMouseY;
            
            panX += deltaX;
            panY += deltaY;
            
            updateCanvasTransform();
            
            lastMouseX = e.clientX;
            lastMouseY = e.clientY;
        });
    }
}

function handleCanvasMouseUp(e) {
    if (isDraggingNote && draggedNote) {
        // ÎìúÎûòÍ∑∏ Ï¢ÖÎ£å Ïãú Ïï†ÎãàÎ©îÏù¥ÏÖò Ïû¨ÌôúÏÑ±Ìôî
        draggedNote.style.transition = 'all 0.2s ease';
        draggedNote.style.zIndex = '';
        
        // ÏµúÏ¢Ö ÏúÑÏπò ÏóÖÎç∞Ïù¥Ìä∏ Ï†ÑÏÜ° (ÌôïÏã§ÌïòÍ≤å)
        const noteId = draggedNote.dataset.noteId;
        const note = stickyNotes.find(n => n.id === noteId);
        if (note) {
            sendNoteUpdate(note);
        }
        
        isDraggingNote = false;
        draggedNote = null;
        lastUpdateTime = 0; // throttle Ï¥àÍ∏∞Ìôî
    } else {
        isDragging = false;
        canvasContainer.style.cursor = '';
        
        // Ìå®Îãù Ï¢ÖÎ£å Ïãú transition Î≥µÏõê
        canvas.style.transition = 'transform 0.1s ease';
    }
}

function handleCanvasWheel(e) {
    e.preventDefault();
    const factor = e.deltaY > 0 ? 0.9 : 1.1;
    zoom(factor);
}

function openNoteEditor(e) {
    const rect = canvasContainer.getBoundingClientRect();
    const x = (e.clientX - rect.left - panX) / zoomLevel;
    const y = (e.clientY - rect.top - panY) / zoomLevel;
    
    noteEditor.dataset.x = x;
    noteEditor.dataset.y = y;
    noteEditor.classList.remove('hidden');
    
    // Ï¥àÍ∏∞Ìôî
    noteTextOverlay.value = '';
    clearDrawing();
    
    // Ï≤´ Î≤àÏß∏ ÏÉâÏÉÅ ÏÑ†ÌÉù
    colorBtns[0].click();
    
    // ÌÖçÏä§Ìä∏ ÎèÑÍµ¨Î°ú ÏãúÏûë
    setNoteTool('text');
    
    // ÌÖçÏä§Ìä∏ ÏûÖÎ†• Ìè¨Ïª§Ïä§
    setTimeout(() => noteTextOverlay.focus(), 100);
}

function closeNoteEditor() {
    noteEditor.classList.add('hidden');
    // Ï†ïÎ¶¨
    noteTextOverlay.value = '';
    clearDrawing();
}

function setupDrawingCanvas() {
    unifiedCtx.strokeStyle = '#333';
    unifiedCtx.lineWidth = 2;
    unifiedCtx.lineCap = 'round';
    
    unifiedCanvas.addEventListener('mousedown', startDrawing);
    unifiedCanvas.addEventListener('mousemove', draw);
    unifiedCanvas.addEventListener('mouseup', stopDrawing);
    unifiedCanvas.addEventListener('mouseout', stopDrawing);
}

function startDrawing(e) {
    if (currentNoteTool === 'text') return; // ÌÖçÏä§Ìä∏ Î™®ÎìúÏóêÏÑúÎäî Í∑∏Î¶¨Í∏∞ ÎπÑÌôúÏÑ±Ìôî
    
    noteIsDrawing = true;
    const rect = unifiedCanvas.getBoundingClientRect();
    const x = e.clientX - rect.left;
    const y = e.clientY - rect.top;
    
    if (currentNoteTool === 'pen') {
        unifiedCtx.beginPath();
        unifiedCtx.moveTo(x, y);
    }
}

function draw(e) {
    if (!noteIsDrawing || currentNoteTool === 'text') return;
    
    const rect = unifiedCanvas.getBoundingClientRect();
    const x = e.clientX - rect.left;
    const y = e.clientY - rect.top;
    
    if (currentNoteTool === 'pen') {
        unifiedCtx.lineTo(x, y);
        unifiedCtx.stroke();
    } else if (currentNoteTool === 'underline') {
        // Î∞ëÏ§Ñ Í∑∏Î¶¨Í∏∞
        unifiedCtx.beginPath();
        unifiedCtx.moveTo(x - 20, y);
        unifiedCtx.lineTo(x + 20, y);
        unifiedCtx.stroke();
        stopDrawing();
    } else if (currentNoteTool === 'circle') {
        // ÎèôÍ∑∏ÎùºÎØ∏ Í∑∏Î¶¨Í∏∞
        unifiedCtx.beginPath();
        unifiedCtx.arc(x, y, 15, 0, 2 * Math.PI);
        unifiedCtx.stroke();
        stopDrawing();
    }
}

function stopDrawing() {
    noteIsDrawing = false;
}

function setDrawingTool(tool) {
    currentNoteTool = tool;
}

function clearDrawing() {
    unifiedCtx.clearRect(0, 0, unifiedCanvas.width, unifiedCanvas.height);
}

// ÎÖ∏Ìä∏ Ï†ÄÏû•
async function saveNote() {
    const text = noteTextOverlay.value.trim();
    const drawingData = unifiedCanvas.toDataURL();
    const x = parseFloat(noteEditor.dataset.x);
    const y = parseFloat(noteEditor.dataset.y);
    
    // Îπà Ï∫îÎ≤ÑÏä§ Ï≤¥ÌÅ¨
    const emptyCanvas = document.createElement('canvas');
    emptyCanvas.width = unifiedCanvas.width;
    emptyCanvas.height = unifiedCanvas.height;
    const isEmpty = drawingData === emptyCanvas.toDataURL();
    
    if (!text && isEmpty) {
        alert('ÎÇ¥Ïö©ÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî!');
        return;
    }
    
    // ÌÖçÏä§Ìä∏ÏôÄ Í∑∏Î¶ºÏùÑ Ìï©Ïπú ÏµúÏ¢Ö Ïù¥ÎØ∏ÏßÄ ÏÉùÏÑ±
    const finalCanvas = document.createElement('canvas');
    finalCanvas.width = unifiedCanvas.width;
    finalCanvas.height = unifiedCanvas.height;
    const finalCtx = finalCanvas.getContext('2d');
    
    // Í∑∏Î¶º Î®ºÏ†Ä Í∑∏Î¶¨Í∏∞
    if (!isEmpty) {
        finalCtx.drawImage(unifiedCanvas, 0, 0);
    }
    
    // ÌÖçÏä§Ìä∏ Ïò§Î≤ÑÎ†àÏù¥
    if (text) {
        finalCtx.fillStyle = '#333';
        finalCtx.font = '18px Caveat, cursive';
        finalCtx.textAlign = 'left';
        finalCtx.textBaseline = 'top';
        
        // Ïó¨Îü¨ Ï§Ñ ÌÖçÏä§Ìä∏ Ï≤òÎ¶¨
        const lines = text.split('\n');
        const lineHeight = 22;
        lines.forEach((line, index) => {
            finalCtx.fillText(line, 10, 10 + (index * lineHeight));
        });
    }
    
    const note = {
        id: 'note_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9),
        text: text,
        drawing: finalCanvas.toDataURL(),
        color: selectedColor,
        x: x,
        y: y,
        author: currentUser.name,
        authorId: currentUser.id,
        timestamp: Date.now(),
        rotation: (Math.random() - 0.5) * 10 // -5ÎèÑÏóêÏÑú 5ÎèÑ ÏÇ¨Ïù¥ ÎûúÎç§ ÌöåÏ†Ñ
    };
    
    // ÏÑúÎ≤ÑÏóêÎßå Ï†ÑÏÜ°, Î°úÏª¨ÏóêÎäî Ï∂îÍ∞ÄÌïòÏßÄ ÏïäÏùå (ÏÑúÎ≤Ñ ÏùëÎãµ ÎåÄÍ∏∞)
    if (ws && ws.readyState === WebSocket.OPEN) {
        ws.send(JSON.stringify({
            type: 'create_note',
            note: note
        }));
        
        // Ï†ÄÏû• Î≤ÑÌäº ÎπÑÌôúÏÑ±ÌôîÌïòÏó¨ Ï§ëÎ≥µ Ï†ÑÏÜ° Î∞©ÏßÄ
        const saveBtn = document.getElementById('save-note');
        saveBtn.disabled = true;
        saveBtn.textContent = 'Ï†ÄÏû• Ï§ë...';
    }
    
    closeNoteEditor();
}

// Ïä§Ìã∞ÌÇ§ ÎÖ∏Ìä∏ Ï∂îÍ∞Ä (Ï§ëÎ≥µ Î∞©ÏßÄ)
function addStickyNote(note) {
    // Ïù¥ÎØ∏ Ï°¥Ïû¨ÌïòÎäî ÎÖ∏Ìä∏Ïù∏ÏßÄ ÌôïÏù∏
    if (stickyNotes.find(n => n.id === note.id)) {
        return;
    }
    
    stickyNotes.push(note);
    renderStickyNote(note);
}

// Ïä§Ìã∞ÌÇ§ ÎÖ∏Ìä∏ Î†åÎçîÎßÅ
function renderStickyNote(note) {
    // Ïù¥ÎØ∏ Î†åÎçîÎßÅÎêú ÎÖ∏Ìä∏Ïù∏ÏßÄ ÌôïÏù∏
    if (canvas.querySelector(`[data-note-id="${note.id}"]`)) {
        return;
    }
    
    const noteElement = document.createElement('div');
    noteElement.className = 'sticky-note';
    noteElement.style.backgroundColor = note.color;
    noteElement.style.left = note.x + 'px';
    noteElement.style.top = note.y + 'px';
    noteElement.style.transform = `rotate(${note.rotation}deg)`;
    noteElement.dataset.noteId = note.id;
    
    // Î≥∏Ïù∏Ïù¥ ÎßåÎì† ÎÖ∏Ìä∏Îäî ÎìúÎûòÍ∑∏ Í∞ÄÎä• ÌëúÏãú
    if (note.authorId === currentUser.id) {
        noteElement.classList.add('draggable');
    }
    
    const contentDiv = document.createElement('div');
    contentDiv.className = 'note-content';
    
    // ÌÜµÌï© Ïù¥ÎØ∏ÏßÄÍ∞Ä ÏûàÏúºÎ©¥ ÌëúÏãú
    if (note.drawing) {
        const drawingImg = document.createElement('img');
        drawingImg.className = 'note-drawing';
        drawingImg.src = note.drawing;
        drawingImg.style.maxWidth = '100%';
        drawingImg.style.height = 'auto';
        contentDiv.appendChild(drawingImg);
    }
    
    // ÌÖçÏä§Ìä∏Îßå ÏûàÍ≥† Í∑∏Î¶ºÏù¥ ÏóÜÎäî Í≤ΩÏö∞ (ÌïòÏúÑ Ìò∏ÌôòÏÑ±)
    if (note.text && !note.drawing) {
        const textDiv = document.createElement('div');
        textDiv.className = 'note-text';
        textDiv.textContent = note.text;
        contentDiv.appendChild(textDiv);
    }
    
    const authorDiv = document.createElement('div');
    authorDiv.className = 'note-author';
    authorDiv.textContent = note.author;
    
    noteElement.appendChild(contentDiv);
    noteElement.appendChild(authorDiv);
    
    canvas.appendChild(noteElement);
}

// ÌéòÏù¥ÏßÄ Í∞ÄÏãúÏÑ± Î≥ÄÍ≤Ω Ï≤òÎ¶¨
function setupVisibilityHandlers() {
    // ÌéòÏù¥ÏßÄ Í∞ÄÏãúÏÑ± API
    document.addEventListener('visibilitychange', () => {
        isPageVisible = !document.hidden;
        
        if (isPageVisible && currentUser) {
            // ÌéòÏù¥ÏßÄÍ∞Ä Îã§Ïãú Î≥¥Ïù¥Î©¥ ÎèôÍ∏∞Ìôî
            console.log('ÌéòÏù¥ÏßÄ ÌôúÏÑ±Ìôî - ÎèôÍ∏∞Ìôî ÏãúÏûë');
            syncWithServer();
        }
    });
    
    // ÏúàÎèÑÏö∞ Ìè¨Ïª§Ïä§/Î∏îÎü¨ Ïù¥Î≤§Ìä∏
    window.addEventListener('focus', () => {
        isPageVisible = true;
        if (currentUser) {
            console.log('ÏúàÎèÑÏö∞ Ìè¨Ïª§Ïä§ - ÎèôÍ∏∞Ìôî ÏãúÏûë');
            syncWithServer();
        }
    });
    
    window.addEventListener('blur', () => {
        isPageVisible = false;
    });
}

// Ïó∞Í≤∞ ÏÉÅÌÉú ÌëúÏãúÍ∏∞ ÏÑ§Ï†ï
function setupConnectionStatusIndicator() {
    const statusIndicator = document.createElement('div');
    statusIndicator.id = 'connection-status';
    statusIndicator.className = 'connection-status disconnected';
    statusIndicator.innerHTML = '<span class="status-dot"></span><span class="status-text">Ïó∞Í≤∞ Ï§ë...</span>';
    document.body.appendChild(statusIndicator);
}

// Ïó∞Í≤∞ ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
function updateConnectionStatus(status) {
    connectionStatus = status;
    const indicator = document.getElementById('connection-status');
    if (!indicator) return;
    
    indicator.className = `connection-status ${status}`;
    
    switch (status) {
        case 'connected':
            indicator.innerHTML = '<span class="status-dot"></span><span class="status-text">Ïã§ÏãúÍ∞Ñ Ïó∞Í≤∞Îê®</span>';
            break;
        case 'connecting':
            indicator.innerHTML = '<span class="status-dot"></span><span class="status-text">Ïó∞Í≤∞ Ï§ë...</span>';
            break;
        case 'disconnected':
            indicator.innerHTML = '<span class="status-dot"></span><span class="status-text">Ïó∞Í≤∞ ÎÅäÍπÄ</span>';
            break;
    }
}

// ÏÑúÎ≤ÑÏôÄ ÎèôÍ∏∞Ìôî
function syncWithServer() {
    if (ws && ws.readyState === WebSocket.OPEN) {
        // Î™®Îì† ÎÖ∏Ìä∏ Îã§Ïãú Î°úÎìú
        ws.send(JSON.stringify({
            type: 'sync_request',
            timestamp: Date.now()
        }));
    } else {
        // WebSocketÏù¥ Ïó∞Í≤∞ÎêòÏñ¥ ÏûàÏßÄ ÏïäÏúºÎ©¥ Ïû¨Ïó∞Í≤∞ ÏãúÎèÑ
        connectWebSocket();
    }
}

// WebSocket Ïó∞Í≤∞
function connectWebSocket() {
    if (ws && (ws.readyState === WebSocket.CONNECTING || ws.readyState === WebSocket.OPEN)) {
        return; // Ïù¥ÎØ∏ Ïó∞Í≤∞ Ï§ëÏù¥Í±∞ÎÇò Ïó∞Í≤∞Îê®
    }
    
    updateConnectionStatus('connecting');
    
    // Í∏∞Ï°¥ Í∞ÑÍ≤© Ï†ïÎ¶¨
    if (reconnectInterval) {
        clearInterval(reconnectInterval);
        reconnectInterval = null;
    }
    if (heartbeatInterval) {
        clearInterval(heartbeatInterval);
        heartbeatInterval = null;
    }
    
    // Cloudflare WorkersÏùò WebSocket ÏóîÎìúÌè¨Ïù∏Ìä∏Ïóê Ïó∞Í≤∞
    const protocol = location.protocol === 'https:' ? 'wss:' : 'ws:';
    const wsUrl = `${protocol}//${location.host}/ws`;
    
    ws = new WebSocket(wsUrl);
    
    ws.onopen = () => {
        console.log('WebSocket Ïó∞Í≤∞Îê®');
        updateConnectionStatus('connected');
        
        // Ïù∏Ï¶ù Î©îÏãúÏßÄ Ï†ÑÏÜ°
        if (currentUser) {
            ws.send(JSON.stringify({
                type: 'auth',
                token: localStorage.getItem('userToken'),
                user: currentUser
            }));
        }
        
        // ÌïòÌä∏ÎπÑÌä∏ ÏãúÏûë
        startHeartbeat();
    };
    
    ws.onmessage = (event) => {
        const data = JSON.parse(event.data);
        const receiveTimestamp = Date.now();
        
        // ÏßÄÏó∞ÏãúÍ∞Ñ Í≥ÑÏÇ∞
        if (data.timestamp) {
            const latency = receiveTimestamp - data.timestamp;
            latencyMonitor.samples.push(latency);
            if (latencyMonitor.samples.length > 10) {
                latencyMonitor.samples.shift();
            }
            latencyMonitor.averageLatency = latencyMonitor.samples.reduce((a, b) => a + b, 0) / latencyMonitor.samples.length;
            
            console.log(`üì• Î©îÏãúÏßÄ ÏàòÏã† ÏßÄÏó∞ÏãúÍ∞Ñ: ${latency}ms (ÌèâÍ∑†: ${Math.round(latencyMonitor.averageLatency)}ms)`);
        }
        
        switch (data.type || data.t) {
            case 'note_created':
                // ÏÑúÎ≤ÑÏóêÏÑú ÎÖ∏Ìä∏ ÏÉùÏÑ± ÏôÑÎ£å - Î™®Îì† ÏÇ¨Ïö©ÏûêÏóêÍ≤å Ï∂îÍ∞Ä
                console.log(`üìù ÏÉà ÎÖ∏Ìä∏ ÏÉùÏÑ±Îê®: ${data.note.id}`);
                addStickyNote(data.note);
                
                // Î≥∏Ïù∏Ïù¥ ÎßåÎì† ÎÖ∏Ìä∏Ïù∏ Í≤ΩÏö∞ Ï†ÄÏû• Î≤ÑÌäº Î≥µÏõê
                if (data.note.authorId === currentUser.id) {
                    const saveBtn = document.getElementById('save-note');
                    if (saveBtn) {
                        saveBtn.disabled = false;
                        saveBtn.textContent = 'Î∂ôÏù¥Í∏∞';
                    }
                }
                break;
            case 'note_updated':
            case 'u': // Ï∂ïÏïΩÌòï ÏßÄÏõê
                // ÎÖ∏Ìä∏ ÏúÑÏπò ÏóÖÎç∞Ïù¥Ìä∏ - Ï¶âÏãú Î∞òÏòÅ
                const updateLatency = receiveTimestamp - (data.timestamp || data.ts || 0);
                const noteId = data.noteId || data.id;
                const x = data.x;
                const y = data.y;
                const clientId = data.clientId || data.c;
                
                console.log(`üîÑ ${noteId}: ${updateLatency}ms`);
                updateNotePositionImmediate(noteId, x, y, clientId);
                break;
            case 'notes_load':
            case 'sync_response':
                // Í∏∞Ï°¥ ÎÖ∏Ìä∏Îì§ Î°úÎìú ÎòêÎäî ÎèôÍ∏∞Ìôî ÏùëÎãµ
                console.log(`üìã ÎÖ∏Ìä∏ ÎèôÍ∏∞Ìôî: ${data.notes.length}Í∞ú`);
                handleNotesSync(data.notes);
                break;
            case 'user_joined':
                console.log('ÏÉà ÏÇ¨Ïö©Ïûê Ï†ëÏÜç:', data.user.name);
                showNotification(`${data.user.name}ÎãòÏù¥ Ï†ëÏÜçÌñàÏäµÎãàÎã§`, 'info');
                break;
            case 'user_left':
                console.log('ÏÇ¨Ïö©Ïûê Ìá¥Ïû•:', data.user.name);
                showNotification(`${data.user.name}ÎãòÏù¥ ÎÇòÍ∞îÏäµÎãàÎã§`, 'info');
                break;
            case 'auth_success':
                // Ïù∏Ï¶ù ÏÑ±Í≥µ ÌõÑ ÎÖ∏Ìä∏ Î°úÎìú ÏöîÏ≤≠
                console.log('‚úÖ Ïù∏Ï¶ù ÏÑ±Í≥µ');
                ws.send(JSON.stringify({
                    type: 'load_notes'
                }));
                break;
            case 'pong':
                // ÌïòÌä∏ÎπÑÌä∏ ÏùëÎãµ
                const heartbeatLatency = receiveTimestamp - (data.timestamp || 0);
                console.log(`üíì ÌïòÌä∏ÎπÑÌä∏ ÏùëÎãµ: ${heartbeatLatency}ms`);
                updateConnectionStatus('connected');
                break;
        }
    };
    
    ws.onclose = (event) => {
        console.log('WebSocket Ïó∞Í≤∞ ÎÅäÍπÄ:', event.code, event.reason);
        updateConnectionStatus('disconnected');
        
        // ÌïòÌä∏ÎπÑÌä∏ Ï§ëÏßÄ
        if (heartbeatInterval) {
            clearInterval(heartbeatInterval);
            heartbeatInterval = null;
        }
        
        // ÏûêÎèô Ïû¨Ïó∞Í≤∞ (3Ï¥à ÌõÑ)
        if (!reconnectInterval) {
            reconnectInterval = setInterval(() => {
                if (currentUser && isPageVisible) {
                    console.log('WebSocket Ïû¨Ïó∞Í≤∞ ÏãúÎèÑ...');
                    connectWebSocket();
                }
            }, 3000);
        }
    };
    
    ws.onerror = (error) => {
        console.error('WebSocket ÏóêÎü¨:', error);
        updateConnectionStatus('disconnected');
    };
}

// ÌïòÌä∏ÎπÑÌä∏ ÏãúÏûë
function startHeartbeat() {
    if (heartbeatInterval) {
        clearInterval(heartbeatInterval);
    }
    
    heartbeatInterval = setInterval(() => {
        if (ws && ws.readyState === WebSocket.OPEN) {
            ws.send(JSON.stringify({
                type: 'ping',
                timestamp: Date.now()
            }));
        }
    }, 15000); // 15Ï¥àÎßàÎã§ ping (Îçî ÏûêÏ£º Ïó∞Í≤∞ ÌôïÏù∏)
}

// ÎÖ∏Ìä∏ ÎèôÍ∏∞Ìôî Ï≤òÎ¶¨
function handleNotesSync(notes) {
    // Í∏∞Ï°¥ ÎÖ∏Ìä∏Îì§Í≥º ÎπÑÍµêÌïòÏó¨ Î≥ÄÍ≤ΩÏÇ¨Ìï≠Îßå Ï†ÅÏö©
    const existingNoteIds = new Set(stickyNotes.map(n => n.id));
    const newNoteIds = new Set(notes.map(n => n.id));
    
    // ÏÇ≠Ï†úÎêú ÎÖ∏Ìä∏ Ï†úÍ±∞
    stickyNotes.forEach(note => {
        if (!newNoteIds.has(note.id)) {
            removeNoteFromDOM(note.id);
        }
    });
    
    // ÏÉàÎ°úÏö¥ ÎÖ∏Ìä∏Îì§ Ï∂îÍ∞Ä/ÏóÖÎç∞Ïù¥Ìä∏
    notes.forEach(note => {
        if (!existingNoteIds.has(note.id)) {
            // ÏÉà ÎÖ∏Ìä∏ Ï∂îÍ∞Ä
            addStickyNote(note);
        } else {
            // Í∏∞Ï°¥ ÎÖ∏Ìä∏ ÏóÖÎç∞Ïù¥Ìä∏ (ÏúÑÏπò Îì±)
            updateExistingNote(note);
        }
    });
    
    console.log(`ÎèôÍ∏∞Ìôî ÏôÑÎ£å: ${notes.length}Í∞ú ÎÖ∏Ìä∏`);
}

// Í∏∞Ï°¥ ÎÖ∏Ìä∏ ÏóÖÎç∞Ïù¥Ìä∏
function updateExistingNote(newNote) {
    const existingNote = stickyNotes.find(n => n.id === newNote.id);
    if (!existingNote) return;
    
    // ÏúÑÏπòÎÇò ÎÇ¥Ïö©Ïù¥ Î≥ÄÍ≤ΩÎêòÏóàÎäîÏßÄ ÌôïÏù∏
    if (existingNote.x !== newNote.x || existingNote.y !== newNote.y) {
        updateNotePosition(newNote.id, newNote.x, newNote.y);
    }
    
    // Îã§Î•∏ ÏÜçÏÑ±Îì§ÎèÑ ÏóÖÎç∞Ïù¥Ìä∏
    Object.assign(existingNote, newNote);
}

// DOMÏóêÏÑú ÎÖ∏Ìä∏ Ï†úÍ±∞
function removeNoteFromDOM(noteId) {
    const noteElement = canvas.querySelector(`[data-note-id="${noteId}"]`);
    if (noteElement) {
        noteElement.remove();
    }
    
    // Î∞∞Ïó¥ÏóêÏÑúÎèÑ Ï†úÍ±∞
    const index = stickyNotes.findIndex(n => n.id === noteId);
    if (index !== -1) {
        stickyNotes.splice(index, 1);
    }
}

// ÏïåÎ¶º ÌëúÏãú
function showNotification(message, type = 'info') {
    const notification = document.createElement('div');
    notification.className = `notification ${type}`;
    notification.textContent = message;
    
    document.body.appendChild(notification);
    
    // 3Ï¥à ÌõÑ Ï†úÍ±∞
    setTimeout(() => {
        notification.classList.add('fade-out');
        setTimeout(() => {
            if (notification.parentNode) {
                notification.parentNode.removeChild(notification);
            }
        }, 300);
    }, 3000);
}

// ÎÖ∏Ìä∏ ÏúÑÏπò ÏóÖÎç∞Ïù¥Ìä∏ Ï†ÑÏÜ°
function sendNoteUpdate(note) {
    if (ws && ws.readyState === WebSocket.OPEN) {
        ws.send(JSON.stringify({
            type: 'update_note',
            noteId: note.id,
            x: note.x,
            y: note.y
        }));
    }
}

// ÎÖ∏Ìä∏ ÏúÑÏπò ÏóÖÎç∞Ïù¥Ìä∏ (Îã§Î•∏ ÏÇ¨Ïö©ÏûêÏùò ÎÖ∏Ìä∏ Ïù¥Îèô Î∞òÏòÅ)
function updateNotePosition(noteId, x, y) {
    // Î°úÏª¨ Îç∞Ïù¥ÌÑ∞ ÏóÖÎç∞Ïù¥Ìä∏
    const note = stickyNotes.find(n => n.id === noteId);
    if (note) {
        note.x = x;
        note.y = y;
    }
    
    // DOM ÏöîÏÜå ÏóÖÎç∞Ïù¥Ìä∏ (ÌòÑÏû¨ ÎìúÎûòÍ∑∏ Ï§ëÏù∏ ÎÖ∏Ìä∏Í∞Ä ÏïÑÎãå Í≤ΩÏö∞ÏóêÎßå)
    if (!isDraggingNote || (draggedNote && draggedNote.dataset.noteId !== noteId)) {
        const noteElement = canvas.querySelector(`[data-note-id="${noteId}"]`);
        if (noteElement) {
            // Îß§Ïö∞ Î∂ÄÎìúÎü¨Ïö¥ Ïã§ÏãúÍ∞Ñ Ïï†ÎãàÎ©îÏù¥ÏÖò
            noteElement.style.transition = 'left 0.1s ease-out, top 0.1s ease-out';
            noteElement.style.left = x + 'px';
            noteElement.style.top = y + 'px';
            
            // ÏßßÏùÄ ÏãúÍ∞Ñ ÌõÑ ÏõêÎûò transitionÏúºÎ°ú Î≥µÏõê
            setTimeout(() => {
                if (noteElement.style.transition.includes('0.1s')) {
                    noteElement.style.transition = 'all 0.2s ease';
                }
            }, 100);
        }
    }
}

// Ï¶âÏãú ÏúÑÏπò ÏóÖÎç∞Ïù¥Ìä∏ Ìï®Ïàò
function updateNotePositionImmediate(noteId, x, y, clientId) {
    // ÏûêÏã†Ïù¥ Î≥¥ÎÇ∏ ÏóÖÎç∞Ïù¥Ìä∏Îäî Î¨¥Ïãú (Ïù¥ÎØ∏ Î°úÏª¨ÏóêÏÑú Ï≤òÎ¶¨Îê®)
    if (clientId === currentUser.id) {
        return;
    }
    
    // Î°úÏª¨ Îç∞Ïù¥ÌÑ∞ ÏóÖÎç∞Ïù¥Ìä∏
    const note = stickyNotes.find(n => n.id === noteId);
    if (note) {
        note.x = x;
        note.y = y;
    }
    
    // DOM ÏöîÏÜå Ï¶âÏãú ÏóÖÎç∞Ïù¥Ìä∏ (ÌòÑÏû¨ ÎìúÎûòÍ∑∏ Ï§ëÏù¥ ÏïÑÎãå Í≤ΩÏö∞ÏóêÎßå)
    if (!isDraggingNote || draggedNote.dataset.noteId !== noteId) {
        const noteElement = canvas.querySelector(`[data-note-id="${noteId}"]`);
        if (noteElement) {
            // Ï¶âÏãú ÏúÑÏπò Î≥ÄÍ≤Ω (Ïï†ÎãàÎ©îÏù¥ÏÖò ÏóÜÏùå) - ÏµúÎåÄ ÏÑ±Îä•
            noteElement.style.transform = `translate(${x}px, ${y}px)`;
        }
    }
}

// ÌÇ§Î≥¥Îìú Îã®Ï∂ïÌÇ§
document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape') {
        if (!noteEditor.classList.contains('hidden')) {
            closeNoteEditor();
        }
    }
    
    // ÎèÑÍµ¨ Ï†ÑÌôò (Ïä§ÌéòÏù¥Ïä§Î∞î)
    if (e.code === 'Space' && !e.target.matches('textarea, input')) {
        e.preventDefault();
        setTool(currentTool === 'move' ? 'note' : 'move');
    }
    
    // Ï§å (Ctrl + Ìú†)
    if (e.ctrlKey) {
        if (e.key === '=' || e.key === '+') {
            e.preventDefault();
            zoom(1.2);
        } else if (e.key === '-') {
            e.preventDefault();
            zoom(0.8);
        }
    }
});

// Ïª®ÌÖçÏä§Ìä∏ Î©îÎâ¥ ÎπÑÌôúÏÑ±Ìôî (Ïö∞ÌÅ¥Î¶≠ Î∞©ÏßÄ)
document.addEventListener('contextmenu', e => e.preventDefault());

function updateStickyNotePreview() {
    // Ïä§Ìã∞ÌÇ§ ÎÖ∏Ìä∏ ÌîÑÎ¶¨Î∑∞ ÏÉâÏÉÅ ÏóÖÎç∞Ïù¥Ìä∏
    stickyNotePreview.style.backgroundColor = selectedColor;
}

function setNoteTool(tool) {
    currentNoteTool = tool;
    
    // ÎèÑÍµ¨ Î≤ÑÌäº ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
    document.querySelectorAll('.note-tools .tool-btn').forEach(btn => {
        btn.classList.remove('active');
    });
    
    // ÌÖçÏä§Ìä∏ Ïò§Î≤ÑÎ†àÏù¥ ÏÉÅÌÉú Î≥ÄÍ≤Ω
    if (tool === 'text') {
        textToolBtn.classList.add('active');
        noteTextOverlay.classList.add('text-mode');
        unifiedCanvas.style.pointerEvents = 'none';
    } else {
        if (tool === 'pen') penToolBtn.classList.add('active');
        else if (tool === 'underline') underlineToolBtn.classList.add('active');
        else if (tool === 'circle') circleToolBtn.classList.add('active');
        
        noteTextOverlay.classList.remove('text-mode');
        unifiedCanvas.style.pointerEvents = 'all';
    }
}

function clearAll() {
    clearDrawing();
    noteTextOverlay.value = '';
    updateStickyNotePreview();
}

function setupUnifiedCanvas() {
    unifiedCtx.strokeStyle = '#333';
    unifiedCtx.lineWidth = 2;
    unifiedCtx.lineCap = 'round';
    
    unifiedCanvas.addEventListener('mousedown', startDrawing);
    unifiedCanvas.addEventListener('mousemove', draw);
    unifiedCanvas.addEventListener('mouseup', stopDrawing);
    unifiedCanvas.addEventListener('mouseout', stopDrawing);
}

// ÏßÄÏó∞ÏãúÍ∞Ñ Î™®ÎãàÌÑ∞ ÏÑ§Ï†ï
function setupLatencyMonitor() {
    const latencyPanel = document.createElement('div');
    latencyPanel.id = 'latency-monitor';
    latencyPanel.innerHTML = `
        <div class="latency-title">üöÄ Ïã§ÏãúÍ∞Ñ ÏÑ±Îä•</div>
        <div class="latency-item">
            <span>ÎÑ§Ìä∏ÏõåÌÅ¨ ÏßÄÏó∞:</span>
            <span id="network-latency">-</span>
        </div>
        <div class="latency-item">
            <span>ÌèâÍ∑† ÏßÄÏó∞:</span>
            <span id="average-latency">-</span>
        </div>
        <div class="latency-item">
            <span>Ï†ÑÏÜ° ÌöüÏàò:</span>
            <span id="update-count">0</span>
        </div>
        <div class="latency-item">
            <span>Ïó∞Í≤∞ ÏÉÅÌÉú:</span>
            <span id="websocket-status">Ïó∞Í≤∞ Ï§ë...</span>
        </div>
    `;
    document.body.appendChild(latencyPanel);
    
    // Ïã§ÏãúÍ∞Ñ ÏóÖÎç∞Ïù¥Ìä∏
    setInterval(updateLatencyDisplay, 100);
}

// ÏßÄÏó∞ÏãúÍ∞Ñ ÌëúÏãú ÏóÖÎç∞Ïù¥Ìä∏
function updateLatencyDisplay() {
    const networkLatency = document.getElementById('network-latency');
    const averageLatency = document.getElementById('average-latency');
    const updateCount = document.getElementById('update-count');
    const wsStatus = document.getElementById('websocket-status');
    
    if (networkLatency && latencyMonitor.samples.length > 0) {
        const latest = latencyMonitor.samples[latencyMonitor.samples.length - 1];
        networkLatency.textContent = `${latest}ms`;
        networkLatency.className = latest < 50 ? 'good' : latest < 100 ? 'ok' : 'bad';
    }
    
    if (averageLatency) {
        averageLatency.textContent = `${Math.round(latencyMonitor.averageLatency)}ms`;
        averageLatency.className = latencyMonitor.averageLatency < 50 ? 'good' : 
                                   latencyMonitor.averageLatency < 100 ? 'ok' : 'bad';
    }
    
    if (updateCount) {
        updateCount.textContent = latencyMonitor.samples.length;
    }
    
    if (wsStatus) {
        wsStatus.textContent = ws ? 
            (ws.readyState === WebSocket.OPEN ? '‚úÖ Ïó∞Í≤∞Îê®' : 
             ws.readyState === WebSocket.CONNECTING ? 'üü° Ïó∞Í≤∞ Ï§ë...' : '‚ùå ÎÅäÍπÄ') : 
            '‚ùå ÏóÜÏùå';
    }
}

// Ï¥àÍ≤ΩÎüâ Ï¶âÏãú Ï†ÑÏÜ° Ìï®Ïàò (ÏµúÏÜå Îç∞Ïù¥ÌÑ∞Îßå Ï†ÑÏÜ°)
function sendNoteUpdateImmediate(note) {
    if (ws && ws.readyState === WebSocket.OPEN) {
        const timestamp = Date.now();
        latencyMonitor.lastSent = timestamp;
        
        // ÏµúÏÜåÌïúÏùò Îç∞Ïù¥ÌÑ∞Îßå Ï†ÑÏÜ°ÌïòÏó¨ ÎÑ§Ìä∏ÏõåÌÅ¨ Î∂ÄÌïò Í∞êÏÜå
        ws.send(JSON.stringify({
            t: 'u', // type: 'update_note' Ï∂ïÏïΩ
            id: note.id,
            x: Math.round(note.x), // ÏÜåÏàòÏ†ê Ï†úÍ±∞
            y: Math.round(note.y), // ÏÜåÏàòÏ†ê Ï†úÍ±∞
            ts: timestamp,
            c: currentUser.id // clientId Ï∂ïÏïΩ
        }));
        
        // ÏßÄÏó∞ÏãúÍ∞Ñ ÎîîÎ≤ÑÍπÖ
        console.log(`üì§ ${timestamp}: (${Math.round(note.x)}, ${Math.round(note.y)})`);
    }
} 